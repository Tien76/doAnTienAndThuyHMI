$version 6.60

// This is the root component of the entire GUI application.
$rect <20,20,220,60>
$output false
class Application : Core::Root
{
  $rect <500,0,700,40>
  inherited property Bounds = <0,0,480,300>;

  // This component demonstrates how to handle the press/release and enter/leave \
  // events generated by a Push Button widget.
  // 
  // This example contains two Timer objects and a Push Button widget.
  // 
  // The Push Button's properties 'OnPress' and 'OnRelease' are connected to the \
  // slot methods 'StartTimer' and 'StopTimer' of the 'pressedTimer' object. Accordingly, \
  // this timer starts to run when the user presses the button and stops when the \
  // user releases it.
  // 
  // The Push Button's properties 'OnEnter' and 'OnLeave' are connected to the slot \
  // methods 'StartTimer' and 'StopTimer' of the 'insideTimer' object. Accordingly, \
  // this second timer runs only when while pressing the button, the user's finger \
  // remains within the button's area.
  // 
  // Every timer is connected to its own slot method ('onPressedTimer' and 'onInsideTimer') \
  // where all timer expirations are counted and the counter values are updated.
  // 
  // Just press the key F5 to start the Prototyper and click with the mouse pointer \
  // within the button's area. Since the Push Button is focused you can activate \
  // it also by pressing on your keyboard the key 'Enter'.
  note legend Note
  {
    attr Bounds = <20,340,850,630>;
  }

  // This is a filled rectangle view.
  $rect <20,20,160,60>
  object Views::Rectangle Background
  {
    preset Bounds = <0,0,480,300>;
    preset Color = #F5F5F5FF;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton PushButton
  {
    preset Bounds = <20,20,450,170>;
    preset OnLeave = insideTimer.StopTimer;
    preset OnEnter = insideTimer.StartTimer;
    preset OnRelease = pressedTimer.StopTimer;
    preset OnPress = pressedTimer.StartTimer;
    preset Label = "Caption";
    preset Appearance = WidgetSet::PushButton_Large;
  }

  $rect <20,20,160,60>
  object Views::Text pressedText
  {
    preset Bounds = <10,190,470,240>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "Pressed counter: 0";
    preset Font = Resources::FontLarge;
    preset Color = #595959FF;
  }

  $rect <20,20,160,60>
  object Views::Text insideText
  {
    preset Bounds = <10,240,470,290>;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "Inside counter: 0";
    preset Font = Resources::FontLarge;
    preset Color = #595959FF;
  }

  $rect <500,140,700,180>
  var int32 pressedCounter = 0;

  $rect <500,60,700,100>
  object Core::Timer pressedTimer
  {
    preset OnTrigger = onPressedTimer;
    preset Period = 100;
  }

  $rect <500,100,700,140>
  slot onPressedTimer
  {
    pressedCounter = pressedCounter + 1;
    pressedText.String = "Pressed counter: " + string( pressedCounter );
  }

  $rect <500,280,700,320>
  var int32 insideCounter = 0;

  $rect <500,200,700,240>
  object Core::Timer insideTimer
  {
    preset OnTrigger = onInsideTimer;
    preset Period = 100;
  }

  $rect <500,240,700,280>
  slot onInsideTimer
  {
    insideCounter = insideCounter + 1;
    insideText.String = "Inside counter: " + string( insideCounter );
  }
}

// This example demonstrates how to react to events generated by a Push Button widget.
note legend Note1
{
  attr Bounds = <20,100,590,170>;
}
