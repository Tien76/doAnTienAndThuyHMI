$version 9.30

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,70,240,110>
unit Core
{
  attr Directory = $Mosaic;
}

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,110,240,150>
unit Resources
{
  attr Directory = $Mosaic;
}

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,150,240,190>
unit Graphics
{
  attr Directory = $Mosaic;
}

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,190,240,230>
unit Effects
{
  attr Directory = $Mosaic;
}

// This unit is a part of the Embedded Wizard class library 'Mosaic20'
$rect <40,230,240,270>
unit Views
{
  attr Directory = $Mosaic;
}

$rect <40,270,240,310>
unit WidgetSet
{
  attr Directory = $Mosaic;
}

// The 'default' Language. Each project has to contain at least one language brick \
// called 'Default'
$rect <540,70,740,110>
language Default;

// The unit of the application class
$rect <40,410,240,450>
unit Application
{
  attr Directory = .\;
}

// Mosaic Framework
note group Note1
{
  attr Bounds = <20,20,260,330>;
}

// Profile Configuration
note group Note2
{
  attr Bounds = <270,20,510,130>;
}

// Languages
note group Note3
{
  attr Bounds = <520,20,760,130>;
}

// Implementation of the DeviceIntegration example
note group Note4
{
  attr Bounds = <20,340,260,470>;
}

// Welcome to the example 'DeviceIntegration'!
//
// Almost every real GUI application needs to display some real data from a certain \
// machine or it needs to control some activities of the underlying system. This \
// application demonstrates the interaction between a GUI application and the underlying \
// target.
// The interface between an Embedded Wizard generated GUI application and the underlying \
// hardware consists of two parts:
//
// -> A device class, that can be accessed from your GUI application. This device \
// class serves as an abstraction layer of the underlying system. This is the interface \
// from the GUI applications point of view.
//
// -> A device driver, written in 'C'. This device driver communicates with the real \
// hardware (e.g. by calling a certain BSP function, by reading/writing some hardware \
// registers, or by communicating via a certain protocol like CAN, I²C, TCIP,...). \
// This is the interface from the main 'C' software point of view.
//
// In this sample application the following interactions are shown:
// - Transmitting a string via serial interface to a terminal
// - Switching the LED on the development board on/off
// - Receiving an event and a counter value when the hardware button on the board \
// is pressed
//
// You can double-click on the 'Application' brick to open the unit within the Composer.
//
// To generate code for the target, press 'F8'.
note legend Note5
{
  attr Bounds = <270,140,1030,580>;
}

// Important: For more details about device classes and device drivers, please have \
// a look to
// https://doc.embedded-wizard.de/device-class-and-device-driver
note legend Note
{
  attr Bounds = <270,590,1030,660>;
}

// This is a profile member for the project. This profile controls the code generation \
// for the target system.
$rect <290,70,490,110>
profile STM32 : STM.STM32.RGB565
{
  attr ScreenOrientation = Normal;
  attr ScreenSize = <480,272>;
  attr Optimization = High;
  attr ApplicationClass = Application::Application;
  attr ModeOfBitmapResources = Compressed;
  attr ModeOfStringConstants = Compressed;
  attr OutputDirectory = ..\..\Application\GeneratedCode;
  attr CleanOutputDirectories = true;

  $rect <10,10,154,50>
  macro Author = "Dipl. Ing. Paul Banach and Dipl. Ing. Manfred Schweyer, Copyright (C) TARA Systems GmbH";
}
